{
  "version": 3,
  "sources": ["../src/content/utils/storageUtils.js", "../src/content/TabManager.js", "../src/content/QualityManager.js", "../src/content/VisibilityListener.js", "../src/content/mainContent.js"],
  "sourcesContent": ["// src/content/utils/storageUtils.js\r\n\r\nexport async function getExtensionEnabled() {\r\n    const { extensionEnabled } = await chrome.storage.sync.get({ extensionEnabled: true });\r\n    return extensionEnabled;\r\n  }\r\n  \r\n  export async function getVisibleQuality() {\r\n    const { visibleQuality } = await chrome.storage.sync.get({ visibleQuality: 'Auto' });\r\n    return visibleQuality;\r\n  }\r\n  \r\n  export async function getHiddenQuality() {\r\n    const { hiddenQuality } = await chrome.storage.sync.get({ hiddenQuality: '144' });\r\n    return hiddenQuality;\r\n  }\r\n  ", "// src/content/TabManager.js\r\nimport { getExtensionEnabled } from './utils/storageUtils.js';\r\n\r\nexport class TabManager {\r\n  constructor() {\r\n    this.currentTabId = null;\r\n    this.tabStates = {};\r\n  }\r\n\r\n  init() {\r\n    this.requestTabId();\r\n  }\r\n\r\n  requestTabId() {\r\n    chrome.runtime.sendMessage({ type: \"getTabId\" }, (response) => {\r\n      if (response && response.tabId !== undefined) {\r\n        this.currentTabId = response.tabId;\r\n        console.log(\"[TabManager] Tab ID initialis\u00E9:\", this.currentTabId);\r\n      } else {\r\n        console.error(\"[TabManager] Impossible d'obtenir le Tab ID.\");\r\n      }\r\n    });\r\n  }\r\n\r\n  updateVisibility(isVisible) {\r\n    if (this.currentTabId == null) return;\r\n\r\n    chrome.runtime.sendMessage({\r\n      type: 'updateVisibility',\r\n      tabId: this.currentTabId,\r\n      visible: isVisible\r\n    }, (response) => {\r\n      console.log(\"[TabManager] Visibilit\u00E9 envoy\u00E9e :\", isVisible);\r\n    });\r\n  }\r\n\r\n  getCurrentTabId() {\r\n    return this.currentTabId;\r\n  }\r\n}\r\n", "// src/content/QualityManager.js\r\nimport { getExtensionEnabled, getVisibleQuality, getHiddenQuality } from './utils/storageUtils.js';\r\n\r\nexport class QualityManager {\r\n  constructor(tabManager) {\r\n    this.tabManager = tabManager;\r\n  }\r\n\r\n  init() {\r\n    chrome.runtime.onMessage.addListener((message) => {\r\n      if (message.type === 'refreshQuality') {\r\n        this.handleRefreshRequest();\r\n      }\r\n    });\r\n  }\r\n\r\n  async handleRefreshRequest() {\r\n    const enabled = await getExtensionEnabled();\r\n    if (!enabled) {\r\n      console.log(\"[QualityManager] Extension d\u00E9sactiv\u00E9e, pas de refresh.\");\r\n      return;\r\n    }\r\n    const isVisible = !document.hidden;\r\n    this.changeQualityBasedOnVisibility(isVisible);\r\n  }\r\n\r\n  async changeQualityBasedOnVisibility(isVisible) {\r\n    const targetQuality = isVisible ? await getVisibleQuality() : await getHiddenQuality();\r\n    console.log(\"[QualityManager] Changement demand\u00E9 vers :\", targetQuality);\r\n    this.setPlayerQuality(targetQuality);\r\n  }\r\n\r\n  setPlayerQuality(targetQuality) {\r\n    // Ici, ton ancienne logique d'ouverture de menu et de s\u00E9lection de qualit\u00E9.\r\n    console.log(\"[QualityManager] Simulation : changement de qualit\u00E9 vers\", targetQuality);\r\n  }\r\n}\r\n", "// src/content/VisibilityListener.js\r\n\r\nexport class VisibilityListener {\r\n    constructor(tabManager, qualityManager) {\r\n      this.tabManager = tabManager;\r\n      this.qualityManager = qualityManager;\r\n      this.listenerActive = false;\r\n    }\r\n  \r\n    init() {\r\n      this.updateVisibilityListener(true); // Toujours actif au d\u00E9but\r\n    }\r\n  \r\n    updateVisibilityListener(enabled) {\r\n      if (enabled && !this.listenerActive) {\r\n        document.addEventListener('visibilitychange', this.onVisibilityChange.bind(this));\r\n        this.listenerActive = true;\r\n      } else if (!enabled && this.listenerActive) {\r\n        document.removeEventListener('visibilitychange', this.onVisibilityChange.bind(this));\r\n        this.listenerActive = false;\r\n      }\r\n    }\r\n  \r\n    async onVisibilityChange() {\r\n      const enabled = await chrome.storage.sync.get({ extensionEnabled: true }).then(r => r.extensionEnabled);\r\n      if (!enabled) {\r\n        console.log(\"[VisibilityListener] Extension d\u00E9sactiv\u00E9e, pas de changement.\");\r\n        return;\r\n      }\r\n  \r\n      const isVisible = !document.hidden;\r\n      console.log(\"[VisibilityListener] VisibilityChange: \", isVisible);\r\n      this.tabManager.updateVisibility(isVisible);\r\n  \r\n      if (isVisible) {\r\n        this.qualityManager.changeQualityBasedOnVisibility(true);\r\n      } else {\r\n        this.qualityManager.changeQualityBasedOnVisibility(false);\r\n      }\r\n    }\r\n  }\r\n  ", "// src/content/mainContent.js\r\nimport { TabManager } from './TabManager.js';\r\nimport { QualityManager } from './QualityManager.js';\r\nimport { VisibilityListener } from './VisibilityListener.js';\r\n\r\nconsole.log('YT Stream Saver - Content script d\u00E9marr\u00E9');\r\n\r\n// Initialisation\r\nconst tabManager = new TabManager();\r\nconst qualityManager = new QualityManager(tabManager);\r\nconst visibilityListener = new VisibilityListener(tabManager, qualityManager);\r\n\r\ntabManager.init();\r\nqualityManager.init();\r\nvisibilityListener.init();\r\n"],
  "mappings": "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",
  "names": ["tabManager", "tabManager", "qualityManager"]
}
